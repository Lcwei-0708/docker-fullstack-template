services:
  nginx:
    build:
      context: ./nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/custom.d:/etc/nginx/custom.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
      - ./nginx/whitelist.conf:/etc/nginx/whitelist.conf
    environment:
      - NODE_ENV=development
      - TZ=${TIMEZONE}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - BACKEND_PORT=${BACKEND_PORT}
      - PMA_PORT=${PMA_PORT}
      - HOSTNAME=${HOSTNAME}
    user: root
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
      - "${BACKEND_PORT}:${BACKEND_PORT}"
      - "${PMA_PORT}:${PMA_PORT}"
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - frontend-network
      - backend-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "nginx -t || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend
    volumes:
      - ./frontend:/app
    environment:
      - NODE_ENV=development
      - TZ=${TIMEZONE}
      - SITE_URL=${SITE_URL}
    user: root
    command: ["sh", "./init-dev.sh"]
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - frontend-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:3000 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: ./backend
    volumes:
      - ./backend:/app
    environment:
      - TZ=${TIMEZONE}
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=${LOG_LEVEL}
      # Database settings
      - DATABASE_URL=mysql+pymysql://${DB_USER}:${DB_PASSWORD}@mariadb/${DB_DATABASE}
      - DATABASE_URL_TEST=mysql+pymysql://${DB_USER}:${DB_PASSWORD}@mariadb/test_${DB_DATABASE}
      - DB_POOL_SIZE=${DB_POOL_SIZE}
      - DB_POOL_TIMEOUT=${DB_POOL_TIMEOUT}
      - DB_POOL_RECYCLE=${DB_POOL_RECYCLE}
      - DB_MAX_OVERFLOW=${DB_MAX_OVERFLOW}
      - DB_CONNECT_TIMEOUT=${DB_CONNECT_TIMEOUT}
      - DB_READ_TIMEOUT=${DB_READ_TIMEOUT}
      - DB_WRITE_TIMEOUT=${DB_WRITE_TIMEOUT}
      # Redis settings
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
    user: root
    command: ["sh", "./init-dev.sh"]
    depends_on:
      mariadb:
        condition: service_healthy
    networks:
      - backend-network
    restart: always    
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:5000 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  mariadb:
    image: mariadb:11.3
    environment:
      - TZ=${TIMEZONE}
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
      - ./db/custom.cnf:/etc/mysql/conf.d/custom.cnf
      - ./db/init-test-db.sh:/docker-entrypoint-initdb.d/init-test-db.sh
    networks:
      - backend-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "mariadb-admin --user=$${MYSQL_USER} --password=$${MYSQL_PASSWORD} --host=localhost ping"]
      start_period: 10s
      interval: 30s
      timeout: 5s
      retries: 5
      
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    environment:
      - TZ=${TIMEZONE}
      - PMA_HOST=mariadb
      - PMA_USER=root
      - PMA_PASSWORD=${DB_ROOT_PASSWORD}
    depends_on:
      mariadb:
        condition: service_healthy
    networks:
      - backend-network
    restart: always

  redis:
    image: redis:latest
    environment:
      - TZ=${TIMEZONE}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    depends_on:
      mariadb:
        condition: service_healthy
    networks:
      - backend-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      start_period: 10s
      interval: 30s
      timeout: 5s
      retries: 5

volumes:
  db_data:

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge